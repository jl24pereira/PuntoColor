/**
 * This class is generated by jOOQ
 */
package db.clases.tables;


import db.clases.Keys;
import db.clases.Public;
import db.clases.tables.records.MedidaRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Medida extends TableImpl<MedidaRecord> {

    private static final long serialVersionUID = -182260889;

    /**
     * The reference instance of <code>public.medida</code>
     */
    public static final Medida MEDIDA = new Medida();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedidaRecord> getRecordType() {
        return MedidaRecord.class;
    }

    /**
     * The column <code>public.medida.idmedida</code>.
     */
    public final TableField<MedidaRecord, Integer> IDMEDIDA = createField("idmedida", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval(('\"medida_idmedida_seq\"'::text)::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.medida.detalle</code>.
     */
    public final TableField<MedidaRecord, String> DETALLE = createField("detalle", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.medida</code> table reference
     */
    public Medida() {
        this("medida", null);
    }

    /**
     * Create an aliased <code>public.medida</code> table reference
     */
    public Medida(String alias) {
        this(alias, MEDIDA);
    }

    private Medida(String alias, Table<MedidaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Medida(String alias, Table<MedidaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MedidaRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEDIDA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MedidaRecord> getPrimaryKey() {
        return Keys.PK_MEDIDA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MedidaRecord>> getKeys() {
        return Arrays.<UniqueKey<MedidaRecord>>asList(Keys.PK_MEDIDA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Medida as(String alias) {
        return new Medida(alias, this);
    }

    /**
     * Rename this table
     */
    public Medida rename(String name) {
        return new Medida(name, null);
    }
}
