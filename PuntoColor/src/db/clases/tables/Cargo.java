/**
 * This class is generated by jOOQ
 */
package db.clases.tables;


import db.clases.Keys;
import db.clases.Public;
import db.clases.tables.records.CargoRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cargo extends TableImpl<CargoRecord> {

    private static final long serialVersionUID = -1695640769;

    /**
     * The reference instance of <code>public.cargo</code>
     */
    public static final Cargo CARGO = new Cargo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CargoRecord> getRecordType() {
        return CargoRecord.class;
    }

    /**
     * The column <code>public.cargo.idcargo</code>.
     */
    public final TableField<CargoRecord, Integer> IDCARGO = createField("idcargo", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval(('\"cargo_idcargo_seq\"'::text)::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.cargo.cargo</code>.
     */
    public final TableField<CargoRecord, String> CARGO_ = createField("cargo", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.cargo</code> table reference
     */
    public Cargo() {
        this("cargo", null);
    }

    /**
     * Create an aliased <code>public.cargo</code> table reference
     */
    public Cargo(String alias) {
        this(alias, CARGO);
    }

    private Cargo(String alias, Table<CargoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cargo(String alias, Table<CargoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CargoRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CARGO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CargoRecord> getPrimaryKey() {
        return Keys.PK_CARGO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CargoRecord>> getKeys() {
        return Arrays.<UniqueKey<CargoRecord>>asList(Keys.PK_CARGO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cargo as(String alias) {
        return new Cargo(alias, this);
    }

    /**
     * Rename this table
     */
    public Cargo rename(String name) {
        return new Cargo(name, null);
    }
}
